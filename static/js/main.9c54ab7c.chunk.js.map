{"version":3,"sources":["assets/logo.svg","assets/github-logo.svg","components/Header/index.tsx","genetic/utils.ts","genetic/chromo.ts","genetic/worker.ts","genetic/evolveScheme/eliteScheme.ts","genetic/index.ts","assets/mona.png","components/ChromoCanvas.tsx","App.tsx","index.tsx"],"names":["Header","Wrapper","Logo","src","logo","alt","Title","href","GHLogo","ghLogo","styled","header","img","div","drawImg","canvas","Promise","resolve","ctx","getContext","Image","onload","a","imgWidth","width","imageHeight","height","canvasWidth","canvasHeight","clearRect","imgScale","Math","min","drawImage","drawChromo","chromo","polygons","forEach","polygon","vertices","firstPt","restPoint","color","fillStyle","beginPath","moveTo","x","y","point","lineTo","closePath","fill","getCanvasData","canvasEle","getImageData","data","Uint8ClampedArray","drawGenerationInfo","font","fillText","generation","fitness","worker","Worker","workerCalculateFitness","Comlink","Point","this","random","value","perturbation","newPoint","Polygon","range","map","v","clone","vertex","mutate","newPolygon","length","Chromo","polyCount","verticesCount","refChromoCanvas","refChromoData","refImageData","compare","document","createElement","crossOverRand","c1","c2","newChromo","_","index","eliteScheme","population","popSize","sortByFitness","sort","b","splitAt","ceil","keepChromo","killChromo","floor","eliteChromo","mutateChromo","keepSize","all","idx1","round","idx2","calculateFitness","mutatedChromo","init","refImage","pCount","vCount","refImageCanvas","remove","newPopulation","mainLoop","ChromoCanvas","forwardRef","ref","containerWidth","containerHeight","maxWidth","onDraw","canvasRef","useRef","useEffect","current","lowestDimension","App","useRafState","populationClone","setPopulationClone","useState","start","setStart","viewSourceImg","setViewSourceImg","showChromoDrawer","setShowChromoDrawer","mona","setRefImg","useMeasure","containerRef","refImageRef","imageInputRef","loop","useRafLoop","bestChromo","stopLoop","startLoop","setup","useCallback","GlobalStyle","Content","Button","onClick","isFlipped","flipDirection","Canvas","InputGroup","click","StyledFileInput","type","name","accept","onChange","e","files","Array","from","target","head","reader","FileReader","readAsDataURL","String","result","Drawer","DrawerContent","show","ChromoWrapper","ChromoId","createGlobalStyle","button","input","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.9c54ab7c.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.14f0eb6d.svg\";","export default __webpack_public_path__ + \"static/media/github-logo.38e30528.svg\";","import React from \"react\";\nimport logo from \"../../assets/logo.svg\";\nimport ghLogo from \"../../assets/github-logo.svg\";\nimport styled from \"styled-components\";\n\nexport const Header = () => (\n  <Wrapper>\n    <Logo src={logo} alt=\"logo\" />\n    <Title>Genetic Image Generation</Title>\n    <a href=\"https://github.com/marklai1998/genetic-image-generation\">\n      <GHLogo src={ghLogo} alt=\"git-hub-logo\" />\n    </a>\n  </Wrapper>\n);\n\nconst Wrapper = styled.header`\n  background-color: #242424;\n  height: 50px;\n  flex-shrink: 0;\n  display: flex;\n`;\n\nconst Logo = styled.img`\n  height: 30px;\n  padding: 10px;\n  background-color: #2d3034;\n  color: #e6e6e6;\n`;\n\nconst Title = styled.div`\n  line-height: 50px;\n  color: #e6e6e6;\n  font-size: 20px;\n  padding-left: 15px;\n  font-weight: bold;\n  width: 100%;\n  overflow: hidden;\n`;\n\nconst GHLogo = styled.img`\n  height: 30px;\n  padding: 10px;\n  background-color: #2d3034;\n  color: #e6e6e6;\n  transition: 0.5s;\n\n  &:hover {\n    background-color: rgb(53, 53, 53);\n  }\n`;\n","import { generation } from \".\";\nimport { Chromo } from \"./chromo\";\n\nexport const drawImg = (src: string, canvas: HTMLCanvasElement) =>\n  new Promise<number>((resolve) => {\n    const ctx = canvas.getContext(\"2d\");\n    if (!ctx) return;\n\n    const img = new Image();\n    img.onload = async () => {\n      const { width: imgWidth, height: imageHeight } = img;\n      const { width: canvasWidth, height: canvasHeight } = canvas;\n\n      ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n\n      const imgScale = Math.min(\n        canvasWidth / imgWidth,\n        canvasHeight / imageHeight\n      );\n\n      ctx.drawImage(img, 0, 0, imgWidth * imgScale, imageHeight * imgScale);\n\n      resolve(imgScale);\n    };\n    img.src = src;\n  });\n\nexport const drawChromo = (chromo: Chromo, canvas: HTMLCanvasElement) => {\n  const ctx = canvas.getContext(\"2d\");\n  if (!ctx) return;\n\n  const { width, height } = canvas;\n\n  ctx.clearRect(0, 0, width, height);\n\n  chromo.polygons.forEach((polygon) => {\n    const [firstPt, ...restPoint] = polygon.vertices;\n    const color = polygon.color;\n    ctx.fillStyle = `rgba(${color[0] * 255}, ${color[1] * 255}, ${\n      color[2] * 255\n    }, ${color[3]})`;\n\n    ctx.beginPath();\n    ctx.moveTo(firstPt.x * width, firstPt.y * height);\n    restPoint.forEach((point) => {\n      ctx.lineTo(point.x * width, point.y * height);\n    });\n\n    ctx.closePath();\n    ctx.fill();\n  });\n};\n\nexport const getCanvasData = (canvasEle: HTMLCanvasElement) => {\n  const ctx = canvasEle.getContext(\"2d\");\n  if (!ctx) return new Uint8ClampedArray();\n  const { data } = ctx.getImageData(0, 0, canvasEle.width, canvasEle.height);\n  return data;\n};\n\nexport const getChromoData = (chromo: Chromo) => {\n  const canvasEle = document.createElement(\"canvas\");\n  drawChromo(chromo, canvasEle);\n  const data = getCanvasData(canvasEle);\n  canvasEle.remove();\n  return data;\n};\n\nexport const drawGenerationInfo = (\n  ctx: CanvasRenderingContext2D,\n  chromo: Chromo\n) => {\n  ctx.font = \"16px Rajdhani\";\n  ctx.fillStyle = \"white\";\n  ctx.fillText(`Generation: ${generation}`, 10, 16);\n  ctx.fillText(`Fitness: ${chromo.fitness}`, 10, 32);\n};\n","import { range } from \"ramda\";\nimport { drawChromo, getCanvasData } from \"./utils\";\nimport * as Comlink from \"comlink\";\n\n/* eslint-disable import/no-webpack-loader-syntax */\n// @ts-ignore\nimport Worker from \"worker-loader!./worker\";\n\nconst worker = new Worker();\nconst workerCalculateFitness =\n  Comlink.wrap<\n    (chromoImage: Uint8ClampedArray, refImage: Uint8ClampedArray) => number\n  >(worker);\n\nexport class Point {\n  #x: number = 0;\n  #y: number = 0;\n\n  constructor() {\n    this.#x = Math.random();\n    this.#y = Math.random();\n  }\n\n  get x() {\n    return this.#x;\n  }\n\n  set x(value: number) {\n    this.#x = value < 0 || value > 1 ? Math.random() : value;\n  }\n\n  get y() {\n    return this.#y;\n  }\n\n  set y(value: number) {\n    this.#y = value < 0 || value > 1 ? Math.random() : value;\n  }\n\n  mutate(perturbation: number) {\n    const shouldMutateX = Math.random() < 0.5;\n    if (shouldMutateX) {\n      this.x =\n        Math.random() < 0.5\n          ? this.x + Math.random() / perturbation\n          : this.x - Math.random() / perturbation;\n    }\n\n    const shouldMutateY = Math.random() < 0.5;\n    if (shouldMutateY) {\n      this.y =\n        Math.random() < 0.5\n          ? this.y + Math.random() / perturbation\n          : this.y - Math.random() / perturbation;\n    }\n  }\n\n  static clone(point: Point) {\n    const newPoint = new Point();\n    newPoint.x = point.x;\n    newPoint.y = point.y;\n    return newPoint;\n  }\n}\n\nexport class Polygon {\n  #vertices: Point[] = [];\n  #color: [r: number, g: number, b: number, alpha: number] = [0, 0, 0, 0];\n\n  constructor(vertices: number) {\n    this.#vertices = range(0, vertices).map(() => new Point());\n    this.#color = [Math.random(), Math.random(), Math.random(), 0.15];\n  }\n\n  get vertices() {\n    return this.#vertices.map((v) => Point.clone(v));\n  }\n\n  set vertices(value: Point[]) {\n    this.#vertices = value;\n  }\n\n  get color() {\n    return [...this.#color];\n  }\n\n  set color(value: [number, number, number, number]) {\n    this.#color = value.map((v) => (v < 0 || v > 1 ? Math.random() : v)) as [\n      number,\n      number,\n      number,\n      number\n    ];\n  }\n\n  mutate(perturbation: number) {\n    this.color = this.color.map((value) => {\n      const shouldMutate = Math.random() < 0.25;\n      if (!shouldMutate) return value;\n\n      return Math.random() < 0.5\n        ? value + (10 * Math.random()) / perturbation\n        : value - (10 * Math.random()) / perturbation;\n    }) as [number, number, number, number];\n\n    this.vertices.forEach((vertex) => {\n      vertex.mutate(perturbation);\n    });\n  }\n\n  static clone(polygon: Polygon) {\n    const newPolygon = new Polygon(polygon.vertices.length);\n    newPolygon.color = polygon.color;\n    newPolygon.vertices = polygon.vertices;\n    return newPolygon;\n  }\n}\n\nexport class Chromo {\n  static refImageData: Uint8ClampedArray = new Uint8ClampedArray();\n  static refChromoCanvas = document.createElement(\"canvas\");\n  static imgScale = 1;\n\n  static polyCount = 0;\n  static verticesCount = 0;\n\n  fitness: number = 0;\n  polygons: Polygon[] = [];\n\n  constructor() {\n    this.polygons = range(0, Chromo.polyCount).map(\n      () => new Polygon(Chromo.verticesCount)\n    );\n  }\n\n  async calculateFitness() {\n    drawChromo(this, Chromo.refChromoCanvas);\n    const refChromoData = getCanvasData(Chromo.refChromoCanvas);\n\n    const fitness = await workerCalculateFitness(\n      refChromoData,\n      Chromo.refImageData\n    );\n    this.fitness = fitness;\n  }\n\n  compare(compare: Chromo) {\n    if (this.fitness === compare.fitness) return 0;\n    if (this.fitness >= compare.fitness) return -1;\n    return 1;\n  }\n\n  mutate(perturbation: number) {\n    this.polygons.forEach((polygon) => {\n      polygon.mutate(perturbation);\n    });\n  }\n}\n","export default function Worker_fn() {\n  return new Worker(__webpack_public_path__ + \"static/js/worker.4be51ca9.worker.js\");\n}\n","import { range, splitAt } from \"ramda\";\nimport { EvolveScheme } from \".\";\nimport { Chromo, Polygon } from \"../chromo\";\n\n/*\n  Elite Scheme is inspired by the Evolution Simulator\n  https://www.youtube.com/watch?v=31dsH2Fs1IQ\n*/\n\nconst CROSSOVER_PROBABILITY = 0.95;\nconst MUTATION_PROBABILITY = 0.95;\n\nconst crossOverRand = (c1: Chromo, c2: Chromo) => {\n  const newChromo = new Chromo();\n\n  const polyCount = newChromo.polygons.length;\n\n  newChromo.polygons = range(0, polyCount).map((_, index) => {\n    const newPolygon =\n      Math.random() < 0.5 ? c1.polygons[index] : c2.polygons[index];\n\n    return Polygon.clone(newPolygon);\n  });\n\n  return newChromo;\n};\n\nexport const eliteScheme: EvolveScheme = async (population) => {\n  const popSize = population.length;\n\n  const sortByFitness = population.sort((a, b) => a.compare(b));\n\n  const [keepChromo, killChromo] = splitAt(\n    Math.ceil(popSize * (1 / 2)),\n    sortByFitness\n  );\n  const [eliteChromo, mutateChromo] = splitAt(\n    Math.floor(keepChromo.length * (1 / 5)),\n    keepChromo\n  );\n\n  const keepSize = keepChromo.length;\n\n  const mutatedChromo = await Promise.all(\n    mutateChromo.map(async (chromo) => {\n      let newChromo = chromo;\n\n      if (Math.random() < CROSSOVER_PROBABILITY) {\n        // Crossover\n        const idx1 = Math.round(Math.random() * (keepSize - 1));\n        const idx2 = Math.round(Math.random() * (keepSize - 1));\n\n        newChromo = crossOverRand(keepChromo[idx1], keepChromo[idx2]);\n      } else {\n        // Mutation\n        if (Math.random() < MUTATION_PROBABILITY)\n          chromo.mutate(500 * Math.random());\n        else newChromo = new Chromo();\n      }\n\n      await newChromo.calculateFitness();\n      return newChromo;\n    })\n  );\n\n  const newChromo = await Promise.all(\n    killChromo.map(async () => {\n      const newChromo = new Chromo();\n      await newChromo.calculateFitness();\n      return newChromo;\n    })\n  );\n\n  return [...eliteChromo, ...mutatedChromo, ...newChromo];\n};\n","import { range } from \"ramda\";\n\nimport { Chromo } from \"./chromo\";\nimport { eliteScheme } from \"./evolveScheme/eliteScheme\";\n// import { randomScheme } from \"./evolveScheme/randomScheme\";\nimport { drawImg, getCanvasData } from \"./utils\";\n\nexport let generation = 0;\nexport let population: Chromo[] = [];\n\nexport const init = async ({\n  refImage,\n  popSize,\n  polyCount: pCount,\n  vertices: vCount,\n}: {\n  refImage: string;\n  popSize: number;\n  polyCount: number;\n  vertices: number;\n}) => {\n  generation = 0;\n  Chromo.polyCount = pCount;\n  Chromo.verticesCount = vCount;\n\n  const canvasHeight = 350;\n  const canvasWidth = 350;\n\n  Chromo.refChromoCanvas.width = canvasWidth;\n  Chromo.refChromoCanvas.height = canvasHeight;\n\n  const refImageCanvas = document.createElement(\"canvas\");\n  refImageCanvas.width = canvasWidth;\n  refImageCanvas.height = canvasHeight;\n\n  const imgScale = await drawImg(refImage, refImageCanvas);\n  Chromo.imgScale = imgScale;\n\n  Chromo.refImageData = getCanvasData(refImageCanvas);\n\n  refImageCanvas.remove();\n\n  const newPopulation = range(0, popSize).map(() => new Chromo());\n  await Promise.all(newPopulation.map((chromo) => chromo.calculateFitness()));\n  population = newPopulation;\n};\n\nexport const mainLoop = async () => {\n  generation = generation + 1;\n\n  // population = await randomScheme(population);\n  population = await eliteScheme(population);\n};\n","export default __webpack_public_path__ + \"static/media/mona.c58c8fd8.png\";","import React, { forwardRef, useEffect, useRef } from \"react\";\nimport { Chromo } from \"../genetic/chromo\";\nimport { drawChromo } from \"../genetic/utils\";\n\ntype Props = {\n  containerWidth: number;\n  containerHeight: number;\n  chromo?: Chromo;\n  maxWidth?: number;\n  onDraw?: (ctx: CanvasRenderingContext2D, chromo: Chromo) => void;\n};\n\nexport const ChromoCanvas = forwardRef(\n  (\n    { containerWidth, containerHeight, chromo, maxWidth, onDraw }: Props,\n    ref: any\n  ) => {\n    const canvasRef = useRef<HTMLCanvasElement>(null);\n\n    useEffect(() => {\n      const canvas = canvasRef.current;\n      if (!canvas) return;\n      const lowestDimension = maxWidth\n        ? Math.min(containerWidth, containerHeight, maxWidth)\n        : Math.min(containerWidth, containerHeight);\n      canvas.width = lowestDimension;\n      canvas.height = lowestDimension;\n    }, [containerWidth, containerHeight, maxWidth]);\n\n    useEffect(() => {\n      const canvas = canvasRef.current;\n      if (!canvas || !chromo) return;\n      drawChromo(chromo, canvas);\n\n      const ctx = canvas.getContext(\"2d\");\n      if (!ctx) return;\n      onDraw && onDraw(ctx, chromo);\n    }, [chromo, onDraw]);\n\n    return <canvas ref={canvasRef} />;\n  }\n);\n","import React, { useCallback, useEffect, useRef, useState } from \"react\";\nimport styled, { createGlobalStyle } from \"styled-components\";\nimport { Header } from \"./components/Header\";\nimport { useMeasure, useRafLoop, useRafState } from \"react-use\";\nimport { init, mainLoop, population } from \"./genetic\";\nimport { drawChromo, drawGenerationInfo, drawImg } from \"./genetic/utils\";\nimport ReactCardFlip from \"react-card-flip\";\nimport mona from \"./assets/mona.png\";\nimport { head } from \"ramda\";\nimport { Chromo } from \"./genetic/chromo\";\nimport { ChromoCanvas } from \"./components/ChromoCanvas\";\n\nconst POP_SIZE = 50;\nconst POLY_COUNT = 150;\nconst VERTICES = 3;\n\nexport const App = () => {\n  const [populationClone, setPopulationClone] = useRafState<Chromo[]>([]);\n  const [start, setStart] = useState(false);\n  const [viewSourceImg, setViewSourceImg] = useState(false);\n  const [showChromoDrawer, setShowChromoDrawer] = useState(false);\n  const [refImage, setRefImg] = useState(mona);\n\n  const [containerRef, { width: containerWidth, height: containerHeight }] =\n    useMeasure<HTMLDivElement>();\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const refImageRef = useRef<HTMLCanvasElement>(null);\n  const imageInputRef = useRef<HTMLInputElement>(null);\n\n  // Canvas resize\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const lowestDimension = Math.min(containerWidth, containerHeight, 350);\n    canvas.width = lowestDimension;\n    canvas.height = lowestDimension;\n\n    const refImageCanvas = refImageRef.current;\n    if (!refImageCanvas) return;\n    refImageCanvas.width = lowestDimension;\n    refImageCanvas.height = lowestDimension;\n  }, [containerWidth, containerHeight]);\n\n  useEffect(() => {\n    const loop = async () => {\n      while (start) await mainLoop();\n    };\n    start && loop();\n  }, [start]);\n\n  // Draw best chromo on screen\n  const [stopLoop, startLoop] = useRafLoop(async () => {\n    showChromoDrawer && setPopulationClone(population);\n    const bestChromo = population[0];\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    drawChromo(bestChromo, canvas);\n\n    const ctx = canvas.getContext(\"2d\");\n    if (!ctx) return;\n    drawGenerationInfo(ctx, bestChromo);\n  }, false);\n\n  const setup = useCallback(async () => {\n    setStart(false);\n    stopLoop();\n\n    await init({\n      refImage: refImage,\n      popSize: POP_SIZE,\n      vertices: VERTICES,\n      polyCount: POLY_COUNT,\n    });\n    const refImageCanvas = refImageRef.current;\n    if (!refImageCanvas) return;\n    await drawImg(refImage, refImageCanvas);\n  }, [refImage, stopLoop]);\n\n  useEffect(() => {\n    setup();\n  }, [setup]);\n\n  const handleFlipStart = () => {\n    if (start) {\n      setStart(false);\n      stopLoop();\n    } else {\n      setStart(true);\n      startLoop();\n    }\n  };\n\n  const handleFileSelected = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const files = Array.from(e.target.files || []);\n    const img = head(files);\n\n    if (!img) return;\n\n    const reader = new FileReader();\n    reader.readAsDataURL(img);\n    reader.onload = () => setRefImg(String(reader.result));\n  };\n\n  return (\n    <>\n      <GlobalStyle />\n      <Header />\n      <Content ref={containerRef}>\n        <div>\n          <Button\n            color=\"#3c4043\"\n            onClick={() => {\n              setViewSourceImg((v) => !v);\n            }}\n          >\n            {viewSourceImg ? \"View Generation\" : \"View Source Image\"}\n          </Button>\n          <ReactCardFlip isFlipped={viewSourceImg} flipDirection=\"horizontal\">\n            <div>\n              <Canvas ref={canvasRef} />\n              <InputGroup>\n                <Button\n                  color={start ? \"#f50057\" : \"#1565c0\"}\n                  onClick={handleFlipStart}\n                >\n                  {start ? \"Pause\" : \"Start\"}\n                </Button>\n                <Button color=\"#f50057\" onClick={setup}>\n                  Reset\n                </Button>\n              </InputGroup>\n            </div>\n            <div>\n              <Canvas ref={refImageRef} />\n              <Button\n                color=\"#3c4043\"\n                onClick={() => {\n                  if (imageInputRef.current) {\n                    imageInputRef.current.click();\n                  }\n                }}\n              >\n                Change Image\n              </Button>\n              <StyledFileInput\n                type=\"file\"\n                name=\"source\"\n                accept=\"image/*\"\n                onChange={handleFileSelected}\n                ref={imageInputRef}\n              />\n            </div>\n          </ReactCardFlip>\n        </div>\n        <Drawer>\n          <Button\n            color=\"#3c4043\"\n            onClick={() => {\n              setShowChromoDrawer((v) => !v);\n            }}\n          >\n            View All Chromo\n          </Button>\n          <DrawerContent show={showChromoDrawer}>\n            {showChromoDrawer && (\n              <>\n                {populationClone.map((chromo, index) => (\n                  <ChromoWrapper>\n                    <ChromoId>#{index}</ChromoId>\n                    <ChromoCanvas\n                      chromo={chromo}\n                      containerHeight={230}\n                      containerWidth={230}\n                      key={index + 1}\n                      onDraw={drawGenerationInfo}\n                    />\n                  </ChromoWrapper>\n                ))}\n              </>\n            )}\n          </DrawerContent>\n        </Drawer>\n      </Content>\n    </>\n  );\n};\n\nconst GlobalStyle = createGlobalStyle`\nhtml {\n  height: 100%;\n}\n\nbody {\n  margin: 0;\n  padding: 0;\n  font-family: 'Rajdhani', Microsoft JhengHei, sans-serif;\n  background-color: #151515;\n  height: 100%;\n}\n\nbutton{\n  font-family: 'Rajdhani', Microsoft JhengHei, sans-serif;\n}\n\n#root {\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n}\n`;\n\nconst Content = styled.div`\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  overflow: auto;\n`;\n\nconst Canvas = styled.canvas`\n  background-color: #000000;\n`;\n\nconst Button = styled.button<{ color: string }>`\n  display: block;\n  width: 100%;\n  padding: 5px 10px;\n  background-color: ${({ color }) => color};\n  border: 0;\n  color: #fff;\n  position: relative;\n`;\n\nconst InputGroup = styled.div`\n  display: flex;\n`;\n\nconst StyledFileInput = styled.input`\n  display: none;\n`;\n\nconst Drawer = styled.div`\n  position: fixed;\n  bottom: 0;\n  width: 100%;\n`;\n\nconst DrawerContent = styled.div<{ show: boolean }>`\n  background-color: #242424;\n  width: 100%;\n\n  height: ${({ show }) => (show ? 250 : 0)}px;\n  overflow-x: auto;\n  overflow-y: hidden;\n  white-space: nowrap;\n`;\n\nconst ChromoWrapper = styled.div`\n  position: relative;\n  display: inline-block;\n`;\n\nconst ChromoId = styled.div`\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  padding: 4px 8px;\n  color: #fff;\n  background-color: #3c4043;\n`;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { App } from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}